{"version":3,"file":"static/js/950.a228ce9f.chunk.js","mappings":"uQA0DA,EAvDkB,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAC3B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,aAAaC,QAAQ,UACpCF,GACFF,EAASE,EAEZ,GAAE,IAEH,IAsBMG,GAAcN,EACpB,OACE,+BACE,gBAAKO,UAAU,YAAf,UACE,kBAAMA,UAAU,aAAaC,SAfZ,SAACC,GANP,IAACC,GAOhBD,EAAME,iBACFX,IAAUH,IAIVG,GAAuB,UAAdS,EAAMG,OAZHF,EAaLV,EAXXa,QAAQC,IAAI,gBAAiBJ,GAC7BZ,EAAUY,IAMRK,MAAM,6BAAD,OAA8Bf,EAA9B,qDAMR,EAMK,WACE,kBACEO,UAAU,mBACVS,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,MAAOpB,EACPqB,SAlCgB,SAACZ,GACzB,IAAMa,EAAab,EAAMc,OAAOH,MAAMI,OACtCvB,EAASqB,EACV,KAiCO,mBAAQN,KAAK,SAAST,UAAU,oBAAoBkB,SAAUnB,EAA9D,UACE,iBAAMC,UAAU,0BAAhB,4BAMX,ECUD,G,KA5De,WAAO,IAAD,EACnB,GAAwCmB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4B7B,EAAAA,EAAAA,UAAQ,UAAC4B,EAAaE,IAAI,gBAAlB,QAA8B,IAAlE,eAAOhC,EAAP,KAAeC,EAAf,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAO+B,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,OAEjB/B,EAAAA,EAAAA,YAAU,WACR,IAAMgC,EAAc9B,aAAaC,QAAQ,UACrC6B,GACFpC,EAAUoC,EAEb,GAAE,IAEH,IAAMC,EAAW,mCAAG,WAAOtC,GAAP,iGAEKuC,EAAAA,EAAAA,IAAqBvC,GAF1B,OAEViC,EAFU,OAGhBC,EAAUD,GAHM,gDAKhBjB,QAAQwB,MAAM,oCAAd,MALgB,yDAAH,sDAmBjB,OAVAnC,EAAAA,EAAAA,YAAU,WACHL,IAGL+B,EAAgB,CAAEU,MAAOzC,IACzBO,aAAamC,QAAQ,SAAU1C,GAC/BsC,EAAYtC,GAEb,GAAE,CAACA,EAAQ+B,KAGV,iCACE,SAAC,EAAD,CAAW/B,OAAQA,EAAQC,UAAWA,IACrCgC,EAAOU,OAAS,IACf,eAAIjC,UAAU,kBAAd,SACGuB,EAAOW,KAAI,SAAAC,GACV,OACE,SAAC,KAAD,CACEC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMd,GADpC,UAIE,gBAAIzB,UAAU,aAAd,WACE,gBACEA,UAAU,eACVwC,IAAKL,EAAMM,MACXC,IAAG,0CAAqCP,EAAMQ,gBAEhD,cAAG3C,UAAU,cAAb,SAA4BmC,EAAMM,YAR/BN,EAAME,GAYhB,QAKV,E","sources":["components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SearchBar.css';\n\nconst SearchBar = ({ search, setSearch }) => {\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    const savedInput = localStorage.getItem('search');\n    if (savedInput) {\n      setInput(savedInput);\n    }\n  }, []);\n\n  const handleInputChange = (event) => {\n    const inputValue = event.target.value.trim();\n    setInput(inputValue);\n  };\n\n  const onSubmit = (searchQuery) => {\n    // Placeholder implementation for the onSubmit function\n    console.log('Search query:', searchQuery);\n    setSearch(searchQuery);\n  };\n\n  const onHandleSubmit = (event) => {\n    event.preventDefault();\n    if (input === search) {\n      alert(`You have already selected ${input}, you can change your search or continue browsing`);\n      return;\n    }\n    if (input || event.key === 'Enter') {\n      onSubmit(input);\n    }\n  };\n\n  const isDisabled = !input;\n  return (\n    <>\n      <div className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={onHandleSubmit}>\n          <input\n            className=\"SearchForm-input\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie\"\n            value={input}\n            onChange={handleInputChange}\n          />\n          <button type=\"submit\" className=\"SearchForm-button\" disabled={isDisabled}>\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default SearchBar;","import React, { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchMoviesWithQuery } from '../../services/api-service';\nimport SearchBar from \"components/SearchBar\";\nimport '../Home/Home.css';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [search, setSearch] = useState(searchParams.get('query') ?? '');\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    const savedSearch = localStorage.getItem('search');\n    if (savedSearch) {\n      setSearch(savedSearch);\n    }\n  }, []);\n\n  const fetchMovies = async (search) => {\n    try {\n      const movies = await fetchMoviesWithQuery(search);\n      setMovies(movies);\n    } catch (error) {\n      console.error('Error fetching movies with query:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (!search) {\n      return\n    }\n    setSearchParams({ query: search });\n    localStorage.setItem('search', search);\n    fetchMovies(search);\n\n  }, [search, setSearchParams]);\n\n  return (\n    <>\n      <SearchBar search={search} setSearch={setSearch} />\n      {movies.length > 0 && (\n        <ul className='trending-movies'>\n          {movies.map(movie => {\n            return (\n              <Link\n                to={`${movie.id}`} state={{ from: location }}\n                key={movie.id}\n              >\n                <li className='movie-item'>\n                  <img\n                    className='movie-poster'\n                    alt={movie.title}\n                    src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                  />\n                  <p className='movie-title'>{movie.title}</p>\n                </li>\n              </Link>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;"],"names":["search","setSearch","useState","input","setInput","useEffect","savedInput","localStorage","getItem","isDisabled","className","onSubmit","event","searchQuery","preventDefault","key","console","log","alert","type","autoComplete","autoFocus","placeholder","value","onChange","inputValue","target","trim","disabled","useSearchParams","searchParams","setSearchParams","get","movies","setMovies","location","useLocation","savedSearch","fetchMovies","fetchMoviesWithQuery","error","query","setItem","length","map","movie","to","id","state","from","alt","title","src","poster_path"],"sourceRoot":""}